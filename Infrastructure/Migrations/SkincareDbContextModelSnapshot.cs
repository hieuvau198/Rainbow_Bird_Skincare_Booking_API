// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(SkincareDbContext))]
    partial class SkincareDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("AnswerId")
                        .HasName("PK__Answer__33724318250B0AF4");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date")
                        .HasColumnName("booking_date");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int")
                        .HasColumnName("therapist_id");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__5DE3A5B1E7F536B6");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SlotId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_Booking_Customer");

                    b.HasIndex(new[] { "BookingDate" }, "IX_Booking_Date");

                    b.HasIndex(new[] { "TherapistId" }, "IX_Booking_Therapist");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CancelBooking", b =>
                {
                    b.Property<int>("CancellationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cancellation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CancellationId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("CancelledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("cancelled_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRefunded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_refunded");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.HasKey("CancellationId")
                        .HasName("PK__CancelBo__4ED4366DBC764A69");

                    b.HasIndex(new[] { "BookingId" }, "UQ__CancelBo__5DE3A5B08EDFD0DB")
                        .IsUnique();

                    b.ToTable("CancelBooking", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CancelPolicy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("policy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxCancellations")
                        .HasColumnType("int")
                        .HasColumnName("max_cancellations");

                    b.Property<int?>("WaitingTimeMinutes")
                        .HasColumnType("int")
                        .HasColumnName("waiting_time_minutes");

                    b.HasKey("PolicyId")
                        .HasName("PK__CancelPo__47DA3F03A0859F16");

                    b.ToTable("CancelPolicy", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime?>("LastVisitAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_visit_at");

                    b.Property<string>("MedicalHistory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medical_history");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("preferences");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__CD65CB85E44E2287");

                    b.HasIndex(new[] { "UserId" }, "UQ__Customer__B9BE370E4F7BA8E3")
                        .IsUnique();

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CustomerAnswer", b =>
                {
                    b.Property<int>("CustomerAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerAnswerId"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    b.Property<DateTime?>("AnsweredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("answered_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerQuizId")
                        .HasColumnType("int")
                        .HasColumnName("customer_quiz_id");

                    b.Property<int?>("PointsEarned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("points_earned");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    b.HasKey("CustomerAnswerId")
                        .HasName("PK__Customer__F5422C52BDDEAA8C");

                    b.HasIndex("AnswerId");

                    b.HasIndex("CustomerQuizId");

                    b.HasIndex("QuestionId");

                    b.ToTable("CustomerAnswer", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CustomerQuiz", b =>
                {
                    b.Property<int>("CustomerQuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_quiz_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerQuizId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("completed_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<DateTime?>("StartedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("started_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("int")
                        .HasColumnName("total_score");

                    b.HasKey("CustomerQuizId")
                        .HasName("PK__Customer__A70E104FCC2E841A");

                    b.HasIndex("QuizId");

                    b.HasIndex(new[] { "CustomerId" }, "IX_CustomerQuiz_Customer");

                    b.ToTable("CustomerQuiz", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("manager_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("department");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("responsibilities");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ManagerId")
                        .HasName("PK__Manager__5A6073FC39E06974");

                    b.HasIndex(new[] { "UserId" }, "UQ__Manager__B9BE370E2630FC25")
                        .IsUnique();

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payment__ED1FC9EAA349FC37");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentPolicy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("policy_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicyId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("currency");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("PaymentWindowHours")
                        .HasColumnType("int")
                        .HasColumnName("payment_window_hours");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("tax_percentage");

                    b.HasKey("PolicyId")
                        .HasName("PK__PaymentP__47DA3F0323B2C361");

                    b.ToTable("PaymentPolicy", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsMultipleChoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_multiple_choice");

                    b.Property<int?>("Points")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("points");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__2EC2154994824B43");

                    b.HasIndex("QuizId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("TotalPoints")
                        .HasColumnType("int")
                        .HasColumnName("total_points");

                    b.HasKey("QuizId")
                        .HasName("PK__Quiz__2D7053ECA184AAA8");

                    b.ToTable("Quiz", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.QuizRecommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recommendation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecommendationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("MaxScore")
                        .HasColumnType("int")
                        .HasColumnName("max_score");

                    b.Property<int?>("MinScore")
                        .HasColumnType("int")
                        .HasColumnName("min_score");

                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quiz_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("RecommendationId")
                        .HasName("PK__QuizReco__BCB11F4FB1377181");

                    b.HasIndex("QuizId");

                    b.HasIndex("ServiceId");

                    b.ToTable("QuizRecommendation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__60883D9004E8B032");

                    b.HasIndex(new[] { "BookingId" }, "UQ__Review__5DE3A5B01C922905")
                        .IsUnique();

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("location");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_name");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__3E0DB8AFBACF949C");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("department");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("position");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("StaffId")
                        .HasName("PK__Staff__1963DD9CF72FBC06");

                    b.HasIndex(new[] { "UserId" }, "UQ__Staff__B9BE370E56FBC23C")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Domain.Entities.Therapist", b =>
                {
                    b.Property<int>("TherapistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("therapist_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TherapistId"));

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_available");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("rating");

                    b.Property<string>("Schedule")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("schedule");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TherapistId")
                        .HasName("PK__Therapis__16DFDBD188680417");

                    b.HasIndex(new[] { "UserId" }, "UQ__Therapis__B9BE370EA60BC22D")
                        .IsUnique();

                    b.ToTable("Therapist", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TherapistAvailability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("availability_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("available")
                        .HasColumnName("status");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int")
                        .HasColumnName("therapist_id");

                    b.Property<DateOnly>("WorkingDate")
                        .HasColumnType("date")
                        .HasColumnName("working_date");

                    b.HasKey("AvailabilityId")
                        .HasName("PK__Therapis__86E3A801B78752C3");

                    b.HasIndex("SlotId");

                    b.HasIndex("TherapistId");

                    b.HasIndex(new[] { "WorkingDate" }, "IX_TherapistAvailability_Date");

                    b.ToTable("TherapistAvailability", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TherapistProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<bool?>("AcceptsNewClients")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("accepts_new_clients");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("Certifications")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("certifications");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("education");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("languages");

                    b.Property<string>("PersonalStatement")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("personal_statement");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Specialties")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("specialties");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int")
                        .HasColumnName("therapist_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("YearsExperience")
                        .HasColumnType("int")
                        .HasColumnName("years_experience");

                    b.HasKey("ProfileId")
                        .HasName("PK__Therapis__AEBB701F4784F495");

                    b.HasIndex(new[] { "TherapistId" }, "UQ__Therapis__16DFDBD0353BAE08")
                        .IsUnique();

                    b.ToTable("TherapistProfile", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int")
                        .HasColumnName("slot_number");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<int>("WorkingDayId")
                        .HasColumnType("int")
                        .HasColumnName("working_day_id");

                    b.HasKey("SlotId")
                        .HasName("PK__TimeSlot__971A01BB3891BB3F");

                    b.HasIndex("WorkingDayId");

                    b.ToTable("TimeSlot", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__User__B9BE370FBC7F1B8F");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email");

                    b.HasIndex(new[] { "Username" }, "IX_User_Username");

                    b.HasIndex(new[] { "Email" }, "UQ__User__AB6E6164323A2DBF")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__User__F3DBC572C29C5FE1")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WorkingDay", b =>
                {
                    b.Property<int>("WorkingDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("working_day_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkingDayId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DayName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("day_name");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("SlotDurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("slot_duration_minutes");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("WorkingDayId")
                        .HasName("PK__WorkingD__FE446ADF3074D242");

                    b.ToTable("WorkingDay", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__Answer__question__619B8048");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__custome__0D7A0286");

                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("Bookings")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Booking__payment__114A936A");

                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__service__0F624AF8");

                    b.HasOne("Domain.Entities.TimeSlot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__slot_id__10566F31");

                    b.HasOne("Domain.Entities.Therapist", "Therapist")
                        .WithMany("Bookings")
                        .HasForeignKey("TherapistId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__therapi__0E6E26BF");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Service");

                    b.Navigation("Slot");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Domain.Entities.CancelBooking", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithOne("CancelBooking")
                        .HasForeignKey("Domain.Entities.CancelBooking", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__CancelBoo__booki__1CBC4616");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entities.Customer", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Customer__user_i__3E52440B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CustomerAnswer", b =>
                {
                    b.HasOne("Domain.Entities.Answer", "Answer")
                        .WithMany("CustomerAnswers")
                        .HasForeignKey("AnswerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerA__answe__6D0D32F4");

                    b.HasOne("Domain.Entities.CustomerQuiz", "CustomerQuiz")
                        .WithMany("CustomerAnswers")
                        .HasForeignKey("CustomerQuizId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerA__custo__6B24EA82");

                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("CustomerAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerA__quest__6C190EBB");

                    b.Navigation("Answer");

                    b.Navigation("CustomerQuiz");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.CustomerQuiz", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerQuizzes")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerQ__custo__656C112C");

                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("CustomerQuizzes")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__CustomerQ__quiz___66603565");

                    b.Navigation("Customer");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Domain.Entities.Manager", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Domain.Entities.Manager", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Manager__user_id__5165187F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__Question__quiz_i__5BE2A6F2");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Domain.Entities.QuizRecommendation", b =>
                {
                    b.HasOne("Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizRecommendations")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__QuizRecom__quiz___76969D2E");

                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("QuizRecommendations")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__QuizRecom__servi__778AC167");

                    b.Navigation("Quiz");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entities.Review", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithOne("Review")
                        .HasForeignKey("Domain.Entities.Review", "BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__booking___17036CC0");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Staff", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entities.Staff", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Staff__user_id__4D94879B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Therapist", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Therapist")
                        .HasForeignKey("Domain.Entities.Therapist", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Therapist__user___4316F928");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.TherapistAvailability", b =>
                {
                    b.HasOne("Domain.Entities.TimeSlot", "Slot")
                        .WithMany("TherapistAvailabilities")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Therapist__slot___05D8E0BE");

                    b.HasOne("Domain.Entities.Therapist", "Therapist")
                        .WithMany("TherapistAvailabilities")
                        .HasForeignKey("TherapistId")
                        .IsRequired()
                        .HasConstraintName("FK__Therapist__thera__04E4BC85");

                    b.Navigation("Slot");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Domain.Entities.TherapistProfile", b =>
                {
                    b.HasOne("Domain.Entities.Therapist", "Therapist")
                        .WithOne("TherapistProfile")
                        .HasForeignKey("Domain.Entities.TherapistProfile", "TherapistId")
                        .IsRequired()
                        .HasConstraintName("FK__Therapist__thera__49C3F6B7");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("Domain.Entities.WorkingDay", "WorkingDay")
                        .WithMany("TimeSlots")
                        .HasForeignKey("WorkingDayId")
                        .IsRequired()
                        .HasConstraintName("FK__TimeSlot__workin__00200768");

                    b.Navigation("WorkingDay");
                });

            modelBuilder.Entity("Domain.Entities.Answer", b =>
                {
                    b.Navigation("CustomerAnswers");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("CancelBooking");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerQuizzes");
                });

            modelBuilder.Entity("Domain.Entities.CustomerQuiz", b =>
                {
                    b.Navigation("CustomerAnswers");
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CustomerAnswers");
                });

            modelBuilder.Entity("Domain.Entities.Quiz", b =>
                {
                    b.Navigation("CustomerQuizzes");

                    b.Navigation("Questions");

                    b.Navigation("QuizRecommendations");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("QuizRecommendations");
                });

            modelBuilder.Entity("Domain.Entities.Therapist", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TherapistAvailabilities");

                    b.Navigation("TherapistProfile");
                });

            modelBuilder.Entity("Domain.Entities.TimeSlot", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TherapistAvailabilities");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Manager");

                    b.Navigation("Staff");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Domain.Entities.WorkingDay", b =>
                {
                    b.Navigation("TimeSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
